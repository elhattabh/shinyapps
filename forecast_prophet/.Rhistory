weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m_email, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m_email, future)
forecastplot <- plot(m_email, forecast)
forecastplot
chatforecastplot <- plot(m_chat, forecast)
m_chat <- prophet(df = chat, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m_chat, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m_chat, future)
chatforecastplot <- plot(m_chat, forecast)
chatforecastplot
m_chat <- prophet(df = chat, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m_chat, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m_chat, future)
chatforecastplot <- plot(m_chat, forecast)
chatforecastplot
m_email <- prophet(df = email, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m_email, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m_email, future)
emailforecastplot <- plot(m_email, forecast)
emailforecastplot
chat <- data[data$category=="chat"& data$y >10, c("ds","y"),]
m_chat <- prophet(df = chat, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m_chat, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m_chat, future)
chatforecastplot <- plot(m_chat, forecast)
chatforecastplot
m_chat <- prophet(df = chat, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m_chat, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m_chat, future)
chat <- plot(m_chat, forecast)
chat
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
plot=input$category
plot
x=input$category
x
y=input$category
y
l
output$forecast <- renderPlot({
l=input$category
l
})
l=input$category
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
chat <- plot(m_chat, forecast)
chat
email
email <- plot(m_email, forecast)
email
m_email <- prophet(df = email, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m_email, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m_email, future)
email <- plot(m_email, forecast)
email
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
l <- input$category
runApp('Documents/forecastshiny')
head(data)
m <- prophet(df = data[data$category==input$category, c("ds","y"),], growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
m_chat <- prophet(df = chat, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m_chat, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m_chat, future)
plot(m_chat, forecast)
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
m <- prophet(df = chat, c("ds","y"),], growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m, future)
forecastplot <- plot(m, forecast)
forecastplot
runApp('Documents/forecastshiny')
m_email <- prophet(df = email, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m_email, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m_email, future)
plot(m_email, forecast)
m_chat <- prophet(df = chat, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m_chat, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m_chat, future)
plot(m_chat, forecast)
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
m_chat <- prophet(df = chat, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m_chat, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m_chat, future)
plot(m_chat, forecast)
future <- make_future_dataframe(m, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m, future)
plot(m, forecast)
m <- prophet(df = chat, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m, future)
plot(m, forecast)
m <- prophet(df = email, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m, future)
plot(m, forecast)
m <- prophet(df = chat, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m, future)
plot(m, forecast)
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
m <- prophet(df = chat, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m, future)
plot(m, forecast)
data <- read.csv("/Users/konafa/Downloads/xts.csv")
data$ds<-as.Date(data$date)
data$y<-as.numeric(data$count)
email <- data[data$category=="email", c("ds","y"),]
chat <- data[data$category=="chat"& data$y >10, c("ds","y"),]
xts <- as.xts(data,order.by=data$ds)
m <- prophet(df = data[data$category==input$category, c("ds","y"),], growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
runApp('Documents/forecastshiny')
m <- prophet(df = chat, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m, future)
plot(m, forecast)
hana <- chat
head(hana)
head(email)
head(chat)
m <- prophet(df = head, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL, yearly.seasonality=FALSE,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m, future)
plot(m, forecast)
runApp('Documents/forecastshiny')
m <- prophet(df = chat, growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL, yearly.seasonality=FALSE,
uncertainty.samples = 1000, fit = TRUE)
future <- make_future_dataframe(m, periods=30, freq = "day", include_history = TRUE)
forecast <- predict(m, future)
plot(m, forecast)
runApp('Documents/forecastshiny')
data$ds<-as.Date(data$date)
data$y<-as.numeric(data$count)
email <- data[data$category=="email", c("ds","y"),]
chat <- data[data$category=="chat" & data$y >10, c("ds","y"),]
data <- read.csv("/Users/konafa/Downloads/xts.csv")
data$ds<-as.Date(data$date)
data$y<-as.numeric(data$count)
email <- data[data$category=="email", c("ds","y"),]
chat <- data[data$category=="chat" & data$y >10, c("ds","y"),]
xts <- as.xts(data,order.by=data$ds)
m <- prophet(df = data[data$category==input$category & data$y >10, c("ds","y"),], growth = "linear", changepoints = NULL,
weekly.seasonality = "TRUE", holidays = NULL, yearly.seasonality=FALSE,
uncertainty.samples = 1000, fit = TRUE)
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
data <- read.table("/Users/konafa/Downloads/squarespacetopics.txt")
data <- read.table("/Users/konafa/Documents/squarespacetopics.txt")
data <- read.csv("/Users/konafa/Documents/squarespacetopics.txt")
data <- read.csv("/Users/konafa/Documents/squarespacetopics.csv")
topics <- read.csv("/Users/konafa/Documents/squarespacetopics.csv")
topics <- read.csv("/Users/konafa/Documents/ss.csv")
topics <- read.csv("/Users/konafa/Downloads/squarespacetopics.csv")
topics$ds<-as.Date(data$date)
topics$ds<-as.Date(topics$date)
topics$y<-as.numeric(topics$count)
email <- topics[topics$category=="email", c("ds","y"),]
chat <- topics[topics$category=="chat", c("ds","y"),]
head(topics)
topics <- read.csv("/Users/konafa/Downloads/squarespacetopics.csv")
class(topics$date)
topics$ds<-as.Date(topics$date)
topics$ds<-as.Date(topics$date)
class(topics$date)
class(topics$ds)
head(topics$ds)
topics <- read.csv("/Users/konafa/Downloads/squarespacetopics.csv")
head(topics)
topics$ds<-as.Date(topics$date, format="%m/%d/%Y")
head(ds)
head(topics$ds)
topics$ds
topics$y<-as.numeric(topics$count)
email <- topics[topics$category=="email", c("ds","y"),]
chat <- topics[topics$category=="chat", c("ds","y"),]
head(chat)
head(topics)
xts <- as.xts(topics,order.by=topics$ds)
auto %>% distinct(topics$chat_topic)
topics %>% distinct(topics$chat_topic)
topics %>% topics$chat_topic
head(topics$chat_topic)
topics %>% distinct(topics$chat_topic)
library(dplyr)
topics %>% distinct(topics$chat_topic)
topics %>% distinct(chat_topic)
runApp('Documents/forecastshiny')
topics <- read.csv("/Users/konafa/Downloads/squarespacetopics.csv")
topics$ds<-as.Date(topics$date, format="%m/%d/%Y")
topics$y<-as.numeric(topics$count)
email <- topics[topics$category=="email", c("ds","y"),]
chat <- topics[topics$category=="chat", c("ds","y"),]
xts <- as.xts(topics,order.by=topics$ds)
d1 <-  dygraph(xts) %>%
dyHighlight(highlightSeriesBackgroundAlpha = 0.5, highlightCircleSize = 3, highlightSeriesOpts = list(strokeWidth = 3),hideOnMouseOut = FALSE) %>%
dyRangeSelector() %>% dyOptions(colors = c("teal"))
d1
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
head(xts)
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
head(xts)
xts <- as.xts(data[-data$y]),])
xts <- as.xts(data[-data$y],)
hana <- data[-data$y]
head(hana)
head(data)
hana <- data[-data$y,]
head(hana)
head(data)
hana <- data[, !(colnames(data) %in% c("y"))]
head(hana)
drop <- data[, !(colnames(data) %in% c("y"))]
xts <- as.xts(drop,order.by=drop$ds)
d1 <-  dygraph(xts) %>%
dyHighlight(highlightSeriesBackgroundAlpha = 0.5, highlightCircleSize = 3, highlightSeriesOpts = list(strokeWidth = 3),hideOnMouseOut = FALSE) %>%
dyRangeSelector() %>% dyOptions(colors = c("teal"))
d1
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
drop <- topics[, !(colnames(topics) %in% c("y"))]
head(drop)
topics %>% distinct(chat_topic)
topics %>% distinct(category)
topics <- read.csv("/Users/konafa/Downloads/squarespacetopics.csv")
topics$ds<-as.Date(topics$date, format="%m/%d/%Y")
topics$y<-as.numeric(topics$count)
email <- topics[topics$category=="email", c("ds","y"),]
chat <- topics[topics$category=="chat", c("ds","y"),]
drop <- topics[, !(colnames(topics) %in% c("y"))]
topics %>% distinct(category)
runApp('Documents/forecastshiny')
head(rop)
head(drop)
runApp('Documents/forecastshiny')
d1 <-  dygraph(xts) %>%
dyHighlight(highlightSeriesBackgroundAlpha = 0.5, highlightCircleSize = 3, highlightSeriesOpts = list(strokeWidth = 3),hideOnMouseOut = FALSE) %>%
dyRangeSelector() %>% dyOptions(colors = c("teal"))
d1
xts <- subset(xts, category == input$category, chat_topic==input$chat_topic)
xts <- as.xts(topics,order.by=topics$ds)
head(xts)
runApp('Documents/forecastshiny')
xts <- subset(xts, category == input$category, chat_topic==input$chat_topic)
d1 <-  dygraph(xts) %>%
dyHighlight(highlightSeriesBackgroundAlpha = 0.5, highlightCircleSize = 3, highlightSeriesOpts = list(strokeWidth = 3),hideOnMouseOut = FALSE) %>%
dyRangeSelector() %>% dyOptions(colors = c("teal"))
d1
runApp('Documents/forecastshiny')
head(topics)
head(topics[category=="email&chats",])
head(topics[topics$category=="email&chats",])
head(topics[topics$category=="emails&chats",])
runApp('Documents/forecastshiny')
drop <- data[, !(colnames(data) %in% c("y"))]
xts <- as.xts(drop,order.by=drop$ds)
head(xts)
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
data <- read.csv("/Users/konafa/Downloads/xts.csv")
drop <- data[, !(colnames(data) %in% c("y"))]
xts <- as.xts(drop,order.by=drop$ds)
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
runApp('Documents/forecastshiny')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='elhattabh',
token='D1346768B56C911ADB3CC2424E970868',
secret='uPp2o/OoqpJsBA+Q3eYCVEgoEj8dyTSFN6rCQ1Ur')
Hide secret   Copy to clipboard
rsconnect::setAccountInfo(name='elhattabh',
token='D1346768B56C911ADB3CC2424E970868',
secret='uPp2o/OoqpJsBA+Q3eYCVEgoEj8dyTSFN6rCQ1Ur')
library(rsconnect)
rsconnect::deployApp(' /Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
runApp('Desktop/Github/shinyapps/forecast_prophet')
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
runApp('Desktop/Github/shinyapps/forecast_prophet')
runApp('Desktop/Github/shinyapps/forecast_prophet')
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
ls
getwd()
setwd( /Users/konafa/Desktop/Github/shinyapps/forecast_prophet)
setwd( /Users/konafa/Desktop/Github/shinyapps/forecast_prophet/)
setwd(/Users/konafa/Desktop/Github/shinyapps/forecast_prophet/)
setwd(Users/konafa/Desktop/Github/shinyapps/forecast_prophet/)
setwd("Users/konafa/Desktop/Github/shinyapps/forecast_prophet/")
setwd("/Users/konafa/Desktop/Github/shinyapps/forecast_prophet/")
getwd()
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
getwd()
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
getwd()
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
plot(m, forecast)
plot(m, forecastmain="Car Milage Data")
plot(m, forecast,main="Car Milage Data")
plot(m, forecast, main="Car Milage Data")
plot(m, forecast, xlab="Car Milage Data")
plot(m, forecast, xlab="Date", ylab="Count")
plot(m, forecast, xlab="Date", ylab="Count", main="hana")
plot(m, forecast, xlab="Date", ylab="Count", main="hana")
runApp()
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
runApp()
rsconnect::deployApp('/Users/konafa/Desktop/Github/shinyapps/forecast_prophet')
x=c(2,7,5)
x
x[2]
x[0:2]
y=seq(from=4, length=3, by=3)
y
dim(z)
z=matrix(seq(1,12),4,3)
z
z[3:4,2]
z[3:4,2:3]
dim(z)
x=runif(50)
y=rnorm(50)
head(y,10)
plot(x,y,xlab="Random uniform", ylab='random normal', pch="*", col="blue")
hist(y)
plot(auto$cylinders,auto$mpg)
auto=read.csv("/Users/konafa/Desktop/Github/IntroToStatisticalLearningR-/data/Auto.csv")
names(auto)
dim(auto)
class(auto)
summary(auto)
plot(auto$cylinders,auto$mpg)
pairs((auto))
identify(horsepower,mpg,name)
attacht(auto)
attatch(auto)
attach(auto)
identify(horsepower,mpg,name)
head(Boston$black,10)
plot(medv~lstat, data=Boston)
plot(medv, lstat)
plot(medv~lstat, data=Boston)
fit1=lm(medv~lstat, data=Boston)
fit1
abline(fit1,col="red")
summary(fit1)
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)), interval="confidence")
lstat=c(5,10,15)
lstat
predict(fit1,data.frame(lstat=c(5,10,15)), interval="confidence")
lm(medv~lstat, data=Boston)
plot(fit1)
fit3=lm(medv~., Boston)
summary(fit3)
fit4=update(fit3, ~.-age-indus)
summary(fit4)
fitrm=lm(medv~rm, data=Boston)
summary(fitrm)
plot(fitrm)
fit7=lm(medv~poly(lstat,4)) #polynomoial of degree 4 of lstat, clearly overfitting
points(lstat,fitted(fit7),col="blue", pch=20)
fit7=lm(medv~poly(lstat,4)) #polynomoial of degree 4 of lstat, clearly overfitting
fit7=lm(medv~poly(lstat,3)) #polynomoial of degree 4 of lstat, clearly overfitting
fit7=lm(medv~poly(lstat,2)) #polynomoial of degree 4 of lstat, clearly overfitting
library(MASS)
head(lstat)
rm.rf
rm()
which.max(hatvalues(lm.fit))
lm.fit=lm(medv~lstat + age, data=Boston)
vif(lm.fit)
anova(lm.fit,fit2)
fit1=lm(medv~.-age, data=Boston)
fit1=update(fit1, ~.-indus)
fit2=lm(medv~lstat + I(lstat^2))
summary(fit2)
fit2=lm(medv~lstat + I(lstat^2))
.rs.restartR()
library(ISLR)
library(MASS)
library(car)
lm.fit=lm(medv~lstat)
lstat
head(medv)
lstat=(rnorm,50)
lstat < - (rnorm,50)
lstat < - rnorm(50)
lstat
Boston#lstat < - rnorm(50)
Boston$lstat < - rnorm(50)
Boston$lstat
predict(lm.fit, data.frame(Boston$lstat=c(5,10,15)), interval = "confidence")
predict(lm.fit, data.frame(Boston$lstat=c(5,10,15)), interval = "confidence")
predict(lm.fit, data.frame(lstat=c(5,10,15)), interval = "confidence")
lm.fit=lm(medv~lstat)
lm.fit=lm(Boston$medv~Boston$lstat)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit, data.frame(lstat=c(5,10,15)), interval = "confidence")
predict(lm.fit, data.frame(lstat=c(5,10,15)), interval = "prediction")
plot(lstat^2, medv)
plot(Boston$lstat^2, Boston$medv)
abline(lm.fit)
abline(lm.fit, lwd=3)
abline(lm.fit, lwd=3,col="blue")
plot(lstat, medv, col="red")
plot(Boston$lstat, medv, col="red")
plot(Boston$lstat, medv, pch=20)
plot(Boston$lstat, medv, pch="+")
which.max(hatvalues(lm.fit))
lm.fit=lm(medv~Boston$lstat + age, data=Boston)
summary(lm.fit)
vif(lm.fit)
fit1=lm(medv~.-age, data=Boston)
fit1=update(fit1, ~.-indus)
summary(lm(medv~lstat*age, data=Boston))
plot(lm(medv~lstat*age, data=Boston))
fit2=lm(medv~Boston$lstat + I(lstat^2))
summary(fit2)
lm.fit=lm(medv~Boston$lstat)
fit2=lm(medv~Boston$lstat + I(Boston$lstat^2))
summary(fit2)
lm.fit=lm(medv~Boston$lstat)
anova(lm.fit,fit2)
lm.fit5=lm(medv~poly(lstat,5))
lm.fit5=lm(medv~poly(Boston$lstat,5))
anova(lm.fit5,fit2)
contrasts(ShelveLoc)
names(Carseats)
lm.fit=lm(Sales~ .+ Income:Advertising + Price:Age, data=Carseats)
summary(lm.fit)
contrasts(ShelveLoc)
contrasts(Carseats$ShelveLoc)
head(Carseats$ShelveLoc)
library(glmnet)
load("QuickStartExample.RData")
nx = matrix(rnorm(10*20),10,20)
head(nx)
predict(fit,newx=nx,s=c(0.1,0.05))
